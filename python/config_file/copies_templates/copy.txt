Customize your GraphQl API

servers:
	- https://balanceplatform-api-test.adyen.com/bcl/v2


queries:

	- get-accountHolders-id(id: String!): AccountHolder
		- url: GET /accountHolders/{id}

	- get-accountHolders-id-balanceAccounts(id: String!): PaginatedBalanceAccountsResponse
		- url: GET /accountHolders/{id}/balanceAccounts
		- query_parameters:
			- offset: integer
			- limit: integer

	- get-balanceAccounts-balanceAccountId-sweeps(balanceAccountId: String!): BalanceSweepConfigurationsResponse
		- url: GET /balanceAccounts/{balanceAccountId}/sweeps
		- query_parameters:
			- offset: integer
			- limit: integer

	- get-balanceAccounts-balanceAccountId-sweeps-sweepId(balanceAccountId: String!, sweepId: String!): SweepConfigurationV2
		- url: GET /balanceAccounts/{balanceAccountId}/sweeps/{sweepId}

	- get-balanceAccounts-id(id: String!): BalanceAccount
		- url: GET /balanceAccounts/{id}

	- get-balanceAccounts-id-paymentInstruments(id: String!): PaginatedPaymentInstrumentsResponse
		- url: GET /balanceAccounts/{id}/paymentInstruments
		- query_parameters:
			- offset: integer
			- limit: integer

	- get-balancePlatforms-id(id: String!): BalancePlatform
		- url: GET /balancePlatforms/{id}

	- get-balancePlatforms-id-accountHolders(id: String!): PaginatedAccountHoldersResponse
		- url: GET /balancePlatforms/{id}/accountHolders
		- query_parameters:
			- offset: integer
			- limit: integer

	- get-paymentInstrumentGroups-id(id: String!): PaymentInstrumentGroup
		- url: GET /paymentInstrumentGroups/{id}

	- get-paymentInstrumentGroups-id-transactionRules(id: String!): TransactionRulesResponse
		- url: GET /paymentInstrumentGroups/{id}/transactionRules

	- get-paymentInstruments-id(id: String!): PaymentInstrument
		- url: GET /paymentInstruments/{id}

	- get-paymentInstruments-id-transactionRules(id: String!): TransactionRulesResponse
		- url: GET /paymentInstruments/{id}/transactionRules

	- get-transactionRules-transactionRuleId(transactionRuleId: String!): TransactionRuleResponse
		- url: GET /transactionRules/{transactionRuleId}


mutations:

	- post-accountHolders: AccountHolder
		- url: POST /accountHolders
		- request_body: InputAccountHolderInfo


	- post-balanceAccounts: BalanceAccount
		- url: POST /balanceAccounts
		- request_body: InputBalanceAccountInfo


	- post-balanceAccounts-balanceAccountId-sweeps(balanceAccountId: String!): SweepConfigurationV2
		- url: POST /balanceAccounts/{balanceAccountId}/sweeps
		- request_body: InputSweepConfigurationV2

	- delete-balanceAccounts-balanceAccountId-sweeps-sweepId(balanceAccountId: String!, sweepId: String!): None
		- url: DELETE /balanceAccounts/{balanceAccountId}/sweeps/{sweepId}

	- post-paymentInstrumentGroups: PaymentInstrumentGroup
		- url: POST /paymentInstrumentGroups
		- request_body: InputPaymentInstrumentGroupInfo


	- post-paymentInstruments: PaymentInstrument
		- url: POST /paymentInstruments
		- request_body: InputPaymentInstrumentInfo


	- post-transactionRules: TransactionRule
		- url: POST /transactionRules
		- request_body: InputTransactionRuleInfo


	- delete-transactionRules-transactionRuleId(transactionRuleId: String!): TransactionRule
		- url: DELETE /transactionRules/{transactionRuleId}


types:
	type PaymentInstrumentGroup {
		balancePlatform: String!
		description: String
		id: String
		properties: object
		reference: String
		txVariant: String!
	}

	type BalanceAccount {
		accountHolderId: String!
		balances: [Balance]
		defaultCurrencyCode: String
		description: String
		id: String!
		reference: String
		status: String
		timeZone: String
	}

	type TransactionRule {
		aggregationLevel: String
		description: String!
		endDate: String
		entityKey: TransactionRuleEntityKey!
		id: String
		interval: TransactionRuleInterval!
		outcomeType: String
		reference: String!
		ruleRestrictions: TransactionRuleRestrictions!
		score: Int
		startDate: String
		status: String
		type: String!
	}

	type TransactionRuleResponse {
		transactionRule: TransactionRule
	}

	type PaginatedBalanceAccountsResponse {
		balanceAccounts: [BalanceAccount]!
		hasNext: Boolean!
		hasPrevious: Boolean!
	}

	type BalancePlatform {
		description: String
		id: String!
		status: String
	}

	type PaginatedAccountHoldersResponse {
		accountHolders: [AccountHolder]!
		hasNext: Boolean!
		hasPrevious: Boolean!
	}

	type SweepConfigurationV2 {
		counterparty: SweepCounterparty!
		currency: String!
		description: String
		id: String!
		status: String
		sweepAmount: Amount
		targetAmount: Amount
		triggerAmount: Amount
		type: String
	}

	type TransactionRulesResponse {
		transactionRules: [TransactionRule]
	}

	type AccountHolder {
		balancePlatform: String
		capabilities: object
		contactDetails: ContactDetails
		description: String
		id: String!
		legalEntityId: String!
		primaryBalanceAccount: String
		reference: String
		status: String
		timeZone: String
	}

	type PaginatedPaymentInstrumentsResponse {
		hasNext: Boolean!
		hasPrevious: Boolean!
		paymentInstruments: [PaymentInstrument]!
	}

	type PaymentInstrument {
		balanceAccountId: String!
		bankAccount: BankAccount
		card: Card
		description: String
		id: String!
		issuingCountryCode: String!
		paymentInstrumentGroupId: String
		reference: String
		status: String
		statusReason: String
		type: String!
	}

	type BalanceSweepConfigurationsResponse {
		hasNext: Boolean!
		hasPrevious: Boolean!
		sweeps: [SweepConfigurationV2]!
	}

	input InputAccountHolderInfo {
		balancePlatform: String
		capabilities: Inputobject
		contactDetails: InputContactDetails
		description: String
		legalEntityId: String!
		reference: String
		timeZone: String
	}

	input InputPaymentInstrumentInfo {
		balanceAccountId: String!
		card: InputCardInfo
		description: String
		issuingCountryCode: String!
		paymentInstrumentGroupId: String
		reference: String
		status: String
		statusReason: String
		type: String!
	}

	input InputTransactionRuleInfo {
		aggregationLevel: String
		description: String!
		endDate: String
		entityKey: InputTransactionRuleEntityKey!
		interval: InputTransactionRuleInterval!
		outcomeType: String
		reference: String!
		ruleRestrictions: InputTransactionRuleRestrictions!
		score: Int
		startDate: String
		status: String
		type: String!
	}

	input InputSweepConfigurationV2 {
		counterparty: InputSweepCounterparty!
		currency: String!
		description: String
		id: String!
		status: String
		sweepAmount: InputAmount
		targetAmount: InputAmount
		triggerAmount: InputAmount
		type: String
	}

	input InputPaymentInstrumentGroupInfo {
		balancePlatform: String!
		description: String
		properties: Inputobject
		reference: String
		txVariant: String!
	}

	input InputBalanceAccountInfo {
		accountHolderId: String!
		defaultCurrencyCode: String
		description: String
		reference: String
		timeZone: String
	}

	type TransactionRuleInterval {
		dayOfMonth: Int
		dayOfWeek: String
		duration: Duration
		timeOfDay: String
		timeZone: String
		type: String!
	}

	type Amount {
		currency: String!
		value: Int!
	}

	type TransactionRule {
		aggregationLevel: String
		description: String!
		endDate: String
		entityKey: TransactionRuleEntityKey!
		id: String
		interval: TransactionRuleInterval!
		outcomeType: String
		reference: String!
		ruleRestrictions: TransactionRuleRestrictions!
		score: Int
		startDate: String
		status: String
		type: String!
	}

	type Balance {
		available: Int!
		balance: Int!
		currency: String!
		reserved: Int!
	}

	type TransactionRuleRestrictions {
		activeNetworkTokens: ActiveNetworkTokensRestriction
		brandVariants: BrandVariantsRestriction
		countries: CountriesRestriction
		differentCurrencies: DifferentCurrenciesRestriction
		entryModes: EntryModesRestriction
		internationalTransaction: InternationalTransactionRestriction
		matchingTransactions: MatchingTransactionsRestriction
		mccs: MccsRestriction
		merchants: MerchantsRestriction
		processingTypes: ProcessingTypesRestriction
		timeOfDay: TimeOfDayRestriction
		totalAmount: TotalAmountRestriction
	}

	type BalanceAccount {
		accountHolderId: String!
		balances: [Balance]
		defaultCurrencyCode: String
		description: String
		id: String!
		reference: String
		status: String
		timeZone: String
	}

	type ContactDetails {
		address: Address!
		email: String!
		phone: Phone!
		webAddress: String
	}

	type CardInfo {
		authentication: Authentication
		brand: String!
		brandVariant: String!
		cardholderName: String!
		configuration: CardConfiguration
		deliveryContact: DeliveryContact
		formFactor: String!
	}

	type BankAccount {
		iban: String!
	}

	type SweepCounterparty {
		balanceAccountId: String
		merchantAccount: String
		transferInstrumentId: String
	}

	type Card {
		authentication: Authentication
		bin: String
		brand: String!
		brandVariant: String!
		cardholderName: String!
		configuration: CardConfiguration
		cvc: String
		deliveryContact: DeliveryContact
		expiration: Expiry
		formFactor: String!
		lastFour: String
		number: String!
	}

	type AccountHolder {
		balancePlatform: String
		capabilities: object
		contactDetails: ContactDetails
		description: String
		id: String!
		legalEntityId: String!
		primaryBalanceAccount: String
		reference: String
		status: String
		timeZone: String
	}

	type TransactionRuleEntityKey {
		entityReference: String
		entityType: String
	}

	type PaymentInstrument {
		balanceAccountId: String!
		bankAccount: BankAccount
		card: Card
		description: String
		id: String!
		issuingCountryCode: String!
		paymentInstrumentGroupId: String
		reference: String
		status: String
		statusReason: String
		type: String!
	}

	type Duration {
		unit: String
		value: Int
	}

	type TransactionRuleEntityKey {
		entityReference: String
		entityType: String
	}

	type TransactionRuleInterval {
		dayOfMonth: Int
		dayOfWeek: String
		duration: Duration
		timeOfDay: String
		timeZone: String
		type: String!
	}

	type TransactionRuleRestrictions {
		activeNetworkTokens: ActiveNetworkTokensRestriction
		brandVariants: BrandVariantsRestriction
		countries: CountriesRestriction
		differentCurrencies: DifferentCurrenciesRestriction
		entryModes: EntryModesRestriction
		internationalTransaction: InternationalTransactionRestriction
		matchingTransactions: MatchingTransactionsRestriction
		mccs: MccsRestriction
		merchants: MerchantsRestriction
		processingTypes: ProcessingTypesRestriction
		timeOfDay: TimeOfDayRestriction
		totalAmount: TotalAmountRestriction
	}

	type ActiveNetworkTokensRestriction {
		operation: String!
		value: Int
	}

	type BrandVariantsRestriction {
		operation: String!
		value: [String]
	}

	type CountriesRestriction {
		operation: String!
		value: [String]
	}

	type DifferentCurrenciesRestriction {
		operation: String!
		value: Boolean
	}

	type EntryModesRestriction {
		operation: String!
		value: [String]
	}

	type InternationalTransactionRestriction {
		operation: String!
		value: Boolean
	}

	type MatchingTransactionsRestriction {
		operation: String!
		value: Int
	}

	type MccsRestriction {
		operation: String!
		value: [String]
	}

	type MerchantsRestriction {
		operation: String!
		value: [MerchantAcquirerPair]
	}

	type ProcessingTypesRestriction {
		operation: String!
		value: [String]
	}

	type TimeOfDayRestriction {
		operation: String!
		value: TimeOfDay
	}

	type TotalAmountRestriction {
		operation: String!
		value: Amount
	}

	type Balance {
		available: Int!
		balance: Int!
		currency: String!
		reserved: Int!
	}

	type Authentication {
		email: String
		password: String
		phone: Phone
	}

	type CardConfiguration {
		activation: String
		activationUrl: String
		bulkAddress: BulkAddress
		cardImageId: String
		carrier: String
		carrierImageId: String
		configurationProfileId: String!
		currency: String
		envelope: String
		insert: String
		language: String
		logoImageId: String
		pinMailer: String
		shipmentMethod: String
	}

	type DeliveryContact {
		address: Address-2!
		email: String
		fullPhoneNumber: String
		name: Name!
		phoneNumber: PhoneNumber
		webAddress: String
	}

	type ContactDetails {
		address: Address!
		email: String!
		phone: Phone!
		webAddress: String
	}

	type BankAccount {
		iban: String!
	}

	type Card {
		authentication: Authentication
		bin: String
		brand: String!
		brandVariant: String!
		cardholderName: String!
		configuration: CardConfiguration
		cvc: String
		deliveryContact: DeliveryContact
		expiration: Expiry
		formFactor: String!
		lastFour: String
		number: String!
	}

	type MerchantAcquirerPair {
		acquirerId: String
		merchantId: String
	}

